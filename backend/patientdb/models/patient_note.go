// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// PatientNote is an object representing the database table.
type PatientNote struct {
	Noteid     string    `boil:"noteid" json:"noteid" toml:"noteid" yaml:"noteid"`
	Patient_Id string    `boil:"patientid" json:"patientid" toml:"patientid" yaml:"patientid"`
	User_Id    string    `boil:"userid" json:"userid" toml:"userid" yaml:"userid"`
	Note       string    `boil:"note" json:"note" toml:"note" yaml:"note"`
	Created    null.Time `boil:"created" json:"created,omitempty" toml:"created" yaml:"created,omitempty"`

	R *patientNoteR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L patientNoteL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PatientNoteColumns = struct {
	Noteid     string
	Patient_Id string
	User_Id    string
	Note       string
	Created    string
}{
	Noteid:     "noteid",
	Patient_Id: "patientid",
	User_Id:    "userid",
	Note:       "note",
	Created:    "created",
}

// Generated where

var PatientNoteWhere = struct {
	Noteid     whereHelperstring
	Patient_Id whereHelperstring
	User_Id    whereHelperstring
	Note       whereHelperstring
	Created    whereHelpernull_Time
}{
	Noteid:     whereHelperstring{field: "\"patient_note\".\"noteid\""},
	Patient_Id: whereHelperstring{field: "\"patient_note\".\"patientid\""},
	User_Id:    whereHelperstring{field: "\"patient_note\".\"userid\""},
	Note:       whereHelperstring{field: "\"patient_note\".\"note\""},
	Created:    whereHelpernull_Time{field: "\"patient_note\".\"created\""},
}

// PatientNoteRels is where relationship names are stored.
var PatientNoteRels = struct {
	Patientid string
	Userid    string
}{
	Patientid: "Patientid",
	Userid:    "Userid",
}

// patientNoteR is where relationships are stored.
type patientNoteR struct {
	Patientid *Patient
	Userid    *User
}

// NewStruct creates a new relationship struct
func (*patientNoteR) NewStruct() *patientNoteR {
	return &patientNoteR{}
}

// patientNoteL is where Load methods for each relationship are stored.
type patientNoteL struct{}

var (
	patientNoteAllColumns            = []string{"noteid", "patientid", "userid", "note", "created"}
	patientNoteColumnsWithoutDefault = []string{"noteid", "patientid", "userid", "note"}
	patientNoteColumnsWithDefault    = []string{"created"}
	patientNotePrimaryKeyColumns     = []string{"noteid"}
)

type (
	// PatientNoteSlice is an alias for a slice of pointers to PatientNote.
	// This should generally be used opposed to []PatientNote.
	PatientNoteSlice []*PatientNote
	// PatientNoteHook is the signature for custom PatientNote hook methods
	PatientNoteHook func(context.Context, boil.ContextExecutor, *PatientNote) error

	patientNoteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	patientNoteType                 = reflect.TypeOf(&PatientNote{})
	patientNoteMapping              = queries.MakeStructMapping(patientNoteType)
	patientNotePrimaryKeyMapping, _ = queries.BindMapping(patientNoteType, patientNoteMapping, patientNotePrimaryKeyColumns)
	patientNoteInsertCacheMut       sync.RWMutex
	patientNoteInsertCache          = make(map[string]insertCache)
	patientNoteUpdateCacheMut       sync.RWMutex
	patientNoteUpdateCache          = make(map[string]updateCache)
	patientNoteUpsertCacheMut       sync.RWMutex
	patientNoteUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var patientNoteBeforeInsertHooks []PatientNoteHook
var patientNoteBeforeUpdateHooks []PatientNoteHook
var patientNoteBeforeDeleteHooks []PatientNoteHook
var patientNoteBeforeUpsertHooks []PatientNoteHook

var patientNoteAfterInsertHooks []PatientNoteHook
var patientNoteAfterSelectHooks []PatientNoteHook
var patientNoteAfterUpdateHooks []PatientNoteHook
var patientNoteAfterDeleteHooks []PatientNoteHook
var patientNoteAfterUpsertHooks []PatientNoteHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PatientNote) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientNoteBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PatientNote) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientNoteBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PatientNote) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientNoteBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PatientNote) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientNoteBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PatientNote) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientNoteAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PatientNote) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientNoteAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PatientNote) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientNoteAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PatientNote) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientNoteAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PatientNote) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range patientNoteAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPatientNoteHook registers your hook function for all future operations.
func AddPatientNoteHook(hookPoint boil.HookPoint, patientNoteHook PatientNoteHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		patientNoteBeforeInsertHooks = append(patientNoteBeforeInsertHooks, patientNoteHook)
	case boil.BeforeUpdateHook:
		patientNoteBeforeUpdateHooks = append(patientNoteBeforeUpdateHooks, patientNoteHook)
	case boil.BeforeDeleteHook:
		patientNoteBeforeDeleteHooks = append(patientNoteBeforeDeleteHooks, patientNoteHook)
	case boil.BeforeUpsertHook:
		patientNoteBeforeUpsertHooks = append(patientNoteBeforeUpsertHooks, patientNoteHook)
	case boil.AfterInsertHook:
		patientNoteAfterInsertHooks = append(patientNoteAfterInsertHooks, patientNoteHook)
	case boil.AfterSelectHook:
		patientNoteAfterSelectHooks = append(patientNoteAfterSelectHooks, patientNoteHook)
	case boil.AfterUpdateHook:
		patientNoteAfterUpdateHooks = append(patientNoteAfterUpdateHooks, patientNoteHook)
	case boil.AfterDeleteHook:
		patientNoteAfterDeleteHooks = append(patientNoteAfterDeleteHooks, patientNoteHook)
	case boil.AfterUpsertHook:
		patientNoteAfterUpsertHooks = append(patientNoteAfterUpsertHooks, patientNoteHook)
	}
}

// One returns a single patientNote record from the query.
func (q patientNoteQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PatientNote, error) {
	o := &PatientNote{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for patient_note")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PatientNote records from the query.
func (q patientNoteQuery) All(ctx context.Context, exec boil.ContextExecutor) (PatientNoteSlice, error) {
	var o []*PatientNote

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PatientNote slice")
	}

	if len(patientNoteAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PatientNote records in the query.
func (q patientNoteQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count patient_note rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q patientNoteQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if patient_note exists")
	}

	return count > 0, nil
}

// Patientid pointed to by the foreign key.
func (o *PatientNote) Patientid(mods ...qm.QueryMod) patientQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"patientid\" = ?", o.Patient_Id),
	}

	queryMods = append(queryMods, mods...)

	query := Patients(queryMods...)
	queries.SetFrom(query.Query, "\"patient\"")

	return query
}

// Userid pointed to by the foreign key.
func (o *PatientNote) Userid(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"userid\" = ?", o.User_Id),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"user\"")

	return query
}

// LoadPatientid allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (patientNoteL) LoadPatientid(ctx context.Context, e boil.ContextExecutor, singular bool, maybePatientNote interface{}, mods queries.Applicator) error {
	var slice []*PatientNote
	var object *PatientNote

	if singular {
		object = maybePatientNote.(*PatientNote)
	} else {
		slice = *maybePatientNote.(*[]*PatientNote)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &patientNoteR{}
		}
		args = append(args, object.Patient_Id)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &patientNoteR{}
			}

			for _, a := range args {
				if a == obj.Patient_Id {
					continue Outer
				}
			}

			args = append(args, obj.Patient_Id)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`patient`), qm.WhereIn(`patient.patientid in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Patient")
	}

	var resultSlice []*Patient
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Patient")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for patient")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for patient")
	}

	if len(patientNoteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Patientid = foreign
		if foreign.R == nil {
			foreign.R = &patientR{}
		}
		foreign.R.PatientidPatientNotes = append(foreign.R.PatientidPatientNotes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Patient_Id == foreign.Patientid {
				local.R.Patientid = foreign
				if foreign.R == nil {
					foreign.R = &patientR{}
				}
				foreign.R.PatientidPatientNotes = append(foreign.R.PatientidPatientNotes, local)
				break
			}
		}
	}

	return nil
}

// LoadUserid allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (patientNoteL) LoadUserid(ctx context.Context, e boil.ContextExecutor, singular bool, maybePatientNote interface{}, mods queries.Applicator) error {
	var slice []*PatientNote
	var object *PatientNote

	if singular {
		object = maybePatientNote.(*PatientNote)
	} else {
		slice = *maybePatientNote.(*[]*PatientNote)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &patientNoteR{}
		}
		args = append(args, object.User_Id)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &patientNoteR{}
			}

			for _, a := range args {
				if a == obj.User_Id {
					continue Outer
				}
			}

			args = append(args, obj.User_Id)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`user`), qm.WhereIn(`user.userid in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(patientNoteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Userid = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UseridPatientNotes = append(foreign.R.UseridPatientNotes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.User_Id == foreign.Userid {
				local.R.Userid = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UseridPatientNotes = append(foreign.R.UseridPatientNotes, local)
				break
			}
		}
	}

	return nil
}

// SetPatientid of the patientNote to the related item.
// Sets o.R.Patientid to related.
// Adds o to related.R.PatientidPatientNotes.
func (o *PatientNote) SetPatientid(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Patient) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"patient_note\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"patientid"}),
		strmangle.WhereClause("\"", "\"", 2, patientNotePrimaryKeyColumns),
	)
	values := []interface{}{related.Patientid, o.Noteid}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Patient_Id = related.Patientid
	if o.R == nil {
		o.R = &patientNoteR{
			Patientid: related,
		}
	} else {
		o.R.Patientid = related
	}

	if related.R == nil {
		related.R = &patientR{
			PatientidPatientNotes: PatientNoteSlice{o},
		}
	} else {
		related.R.PatientidPatientNotes = append(related.R.PatientidPatientNotes, o)
	}

	return nil
}

// SetUserid of the patientNote to the related item.
// Sets o.R.Userid to related.
// Adds o to related.R.UseridPatientNotes.
func (o *PatientNote) SetUserid(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"patient_note\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"userid"}),
		strmangle.WhereClause("\"", "\"", 2, patientNotePrimaryKeyColumns),
	)
	values := []interface{}{related.Userid, o.Noteid}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.User_Id = related.Userid
	if o.R == nil {
		o.R = &patientNoteR{
			Userid: related,
		}
	} else {
		o.R.Userid = related
	}

	if related.R == nil {
		related.R = &userR{
			UseridPatientNotes: PatientNoteSlice{o},
		}
	} else {
		related.R.UseridPatientNotes = append(related.R.UseridPatientNotes, o)
	}

	return nil
}

// PatientNotes retrieves all the records using an executor.
func PatientNotes(mods ...qm.QueryMod) patientNoteQuery {
	mods = append(mods, qm.From("\"patient_note\""))
	return patientNoteQuery{NewQuery(mods...)}
}

// FindPatientNote retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPatientNote(ctx context.Context, exec boil.ContextExecutor, noteid string, selectCols ...string) (*PatientNote, error) {
	patientNoteObj := &PatientNote{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"patient_note\" where \"noteid\"=$1", sel,
	)

	q := queries.Raw(query, noteid)

	err := q.Bind(ctx, exec, patientNoteObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from patient_note")
	}

	return patientNoteObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PatientNote) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no patient_note provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(patientNoteColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	patientNoteInsertCacheMut.RLock()
	cache, cached := patientNoteInsertCache[key]
	patientNoteInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			patientNoteAllColumns,
			patientNoteColumnsWithDefault,
			patientNoteColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(patientNoteType, patientNoteMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(patientNoteType, patientNoteMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"patient_note\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"patient_note\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into patient_note")
	}

	if !cached {
		patientNoteInsertCacheMut.Lock()
		patientNoteInsertCache[key] = cache
		patientNoteInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PatientNote.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PatientNote) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	patientNoteUpdateCacheMut.RLock()
	cache, cached := patientNoteUpdateCache[key]
	patientNoteUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			patientNoteAllColumns,
			patientNotePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update patient_note, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"patient_note\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, patientNotePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(patientNoteType, patientNoteMapping, append(wl, patientNotePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update patient_note row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for patient_note")
	}

	if !cached {
		patientNoteUpdateCacheMut.Lock()
		patientNoteUpdateCache[key] = cache
		patientNoteUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q patientNoteQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for patient_note")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for patient_note")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PatientNoteSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), patientNotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"patient_note\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, patientNotePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in patientNote slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all patientNote")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PatientNote) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no patient_note provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(patientNoteColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	patientNoteUpsertCacheMut.RLock()
	cache, cached := patientNoteUpsertCache[key]
	patientNoteUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			patientNoteAllColumns,
			patientNoteColumnsWithDefault,
			patientNoteColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			patientNoteAllColumns,
			patientNotePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert patient_note, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(patientNotePrimaryKeyColumns))
			copy(conflict, patientNotePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"patient_note\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(patientNoteType, patientNoteMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(patientNoteType, patientNoteMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert patient_note")
	}

	if !cached {
		patientNoteUpsertCacheMut.Lock()
		patientNoteUpsertCache[key] = cache
		patientNoteUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PatientNote record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PatientNote) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PatientNote provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), patientNotePrimaryKeyMapping)
	sql := "DELETE FROM \"patient_note\" WHERE \"noteid\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from patient_note")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for patient_note")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q patientNoteQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no patientNoteQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from patient_note")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for patient_note")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PatientNoteSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(patientNoteBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), patientNotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"patient_note\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, patientNotePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from patientNote slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for patient_note")
	}

	if len(patientNoteAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PatientNote) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPatientNote(ctx, exec, o.Noteid)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PatientNoteSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PatientNoteSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), patientNotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"patient_note\".* FROM \"patient_note\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, patientNotePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PatientNoteSlice")
	}

	*o = slice

	return nil
}

// PatientNoteExists checks if the PatientNote row exists.
func PatientNoteExists(ctx context.Context, exec boil.ContextExecutor, noteid string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"patient_note\" where \"noteid\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, noteid)
	}
	row := exec.QueryRowContext(ctx, sql, noteid)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if patient_note exists")
	}

	return exists, nil
}
